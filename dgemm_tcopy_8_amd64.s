// *******************************************************************
// Copyright 2009, 2010 The University of Texas at Austin.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or
// without modification, are permitted provided that the following
// conditions are met:
//
// 1. Redistributions of source code must retain the above
// copyright notice, this list of conditions and the following
// disclaimer.
//
// 2. Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following
// disclaimer in the documentation and/or other materials
// provided with the distribution.
//
// THIS  SOFTWARE IS PROVIDED  BY THE  UNIVERSITY OF  TEXAS AT
// AUSTIN  ``AS IS''  AND ANY  EXPRESS OR  IMPLIED WARRANTIES,
// INCLUDING, BUT  NOT LIMITED  TO, THE IMPLIED  WARRANTIES OF
// MERCHANTABILITY  AND FITNESS FOR  A PARTICULAR  PURPOSE ARE
// DISCLAIMED.  IN  NO EVENT SHALL THE UNIVERSITY  OF TEXAS AT
// AUSTIN OR CONTRIBUTORS BE  LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL,  SPECIAL, EXEMPLARY,  OR  CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT  NOT LIMITED TO,  PROCUREMENT OF SUBSTITUTE
// GOODS  OR  SERVICES; LOSS  OF  USE,  DATA,  OR PROFITS;  OR
// BUSINESS INTERRUPTION) HOWEVER CAUSED  AND ON ANY THEORY OF
// LIABILITY, WHETHER  IN CONTRACT, STRICT  LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE)  ARISING IN ANY WAY OUT
// OF  THE  USE OF  THIS  SOFTWARE,  EVEN  IF ADVISED  OF  THE
// POSSIBILITY OF SUCH DAMAGE.
//
// The views and conclusions contained in the software and
// documentation are those of the authors and should not be
// interpreted as representing official policies, either expressed
// or implied, of The University of Texas at Austin.
// *******************************************************************

#include "textflag.h"

#define SIZE 8

#define PREFETCHSIZE	16
#define PREFETCH	PREFETCHT0
#define PREFETCHW	PREFETCHT0

#define N	SI
#define M	DI
#define A	DX
#define LDA	CX
#define B	R8

#define AO1	R9
#define AO2	R10
#define LDA3	R11
#define M8	R12

#define I	AX

#define B0	BP
#define B1	R13
#define B2	R14
#define B3	R15

// func dgemm_tcopy_8(m, n int, a []float64, lda int, b []float64)
TEXT Â·dgemm_tcopy_8(SB), NOSPLIT, $0

	MOVQ m+0(FP), M
	MOVQ n+8(FP), N
	MOVQ a_base+16(FP), A
	MOVQ lda+40(FP), LDA
	MOVQ b_base+48(FP), B

	SUBQ $-16 * SIZE, B

	MOVQ M, B1
	MOVQ M, B2
	MOVQ M, B3

	ANDQ $-8, B1
	ANDQ $-4, B2
	ANDQ $-2, B3

	IMULQ N, B1
	IMULQ N, B2
	IMULQ N, B3

	LEAQ (B)(B1*SIZE), B1
	LEAQ (B)(B2*SIZE), B2
	LEAQ (B)(B3*SIZE), B3

	LEAQ (LDA*SIZE), LDA
	LEAQ (LDA)(LDA*2), LDA3

	LEAQ (N*SIZE), M8

	CMPQ N, $8
	JL   L20

L11:
	SUBQ $8, N

	MOVQ A, AO1
	LEAQ (A)(LDA*4), AO2
	LEAQ (A)(LDA*8), A

	MOVQ B, B0
	ADDQ $64 * SIZE, B

	MOVQ M, I
	SARQ $3, I
	JLE  L14

L13:
	PREFETCH PREFETCHSIZE * SIZE(AO1)

	MOVUPS 0 * SIZE(AO1), X0
	MOVUPS 2 * SIZE(AO1), X1
	MOVUPS 4 * SIZE(AO1), X2
	MOVUPS 6 * SIZE(AO1), X3

	PREFETCHW 48 * SIZE(B0)

	MOVAPS X0, -16 * SIZE(B0)
	MOVAPS X1, -14 * SIZE(B0)
	MOVAPS X2, -12 * SIZE(B0)
	MOVAPS X3, -10 * SIZE(B0)

	PREFETCH PREFETCHSIZE * SIZE(AO1)(LDA*1)

	MOVUPS 0 * SIZE(AO1)(LDA*1), X0
	MOVUPS 2 * SIZE(AO1)(LDA*1), X1
	MOVUPS 4 * SIZE(AO1)(LDA*1), X2
	MOVUPS 6 * SIZE(AO1)(LDA*1), X3

	PREFETCHW 56 * SIZE(B0)

	MOVAPS X0, -8 * SIZE(B0)
	MOVAPS X1, -6 * SIZE(B0)
	MOVAPS X2, -4 * SIZE(B0)
	MOVAPS X3, -2 * SIZE(B0)

	PREFETCH PREFETCHSIZE * SIZE(AO1)(LDA*2)

	MOVUPS 0 * SIZE(AO1)(LDA*2), X0
	MOVUPS 2 * SIZE(AO1)(LDA*2), X1
	MOVUPS 4 * SIZE(AO1)(LDA*2), X2
	MOVUPS 6 * SIZE(AO1)(LDA*2), X3

	PREFETCHW 64 * SIZE(B0)

	MOVAPS X0, 0 * SIZE(B0)
	MOVAPS X1, 2 * SIZE(B0)
	MOVAPS X2, 4 * SIZE(B0)
	MOVAPS X3, 6 * SIZE(B0)

	PREFETCH PREFETCHSIZE * SIZE(AO1)(LDA3*1)

	MOVUPS 0 * SIZE(AO1)(LDA3*1), X0
	MOVUPS 2 * SIZE(AO1)(LDA3*1), X1
	MOVUPS 4 * SIZE(AO1)(LDA3*1), X2
	MOVUPS 6 * SIZE(AO1)(LDA3*1), X3

	PREFETCHW 72 * SIZE(B0)

	MOVAPS X0, 8 * SIZE(B0)
	MOVAPS X1, 10 * SIZE(B0)
	MOVAPS X2, 12 * SIZE(B0)
	MOVAPS X3, 14 * SIZE(B0)

	PREFETCH PREFETCHSIZE * SIZE(AO2)

	MOVUPS 0 * SIZE(AO2), X0
	MOVUPS 2 * SIZE(AO2), X1
	MOVUPS 4 * SIZE(AO2), X2
	MOVUPS 6 * SIZE(AO2), X3

	PREFETCHW 80 * SIZE(B0)

	MOVAPS X0, 16 * SIZE(B0)
	MOVAPS X1, 18 * SIZE(B0)
	MOVAPS X2, 20 * SIZE(B0)
	MOVAPS X3, 22 * SIZE(B0)

	PREFETCH PREFETCHSIZE * SIZE(AO2)(LDA*1)

	MOVUPS 0 * SIZE(AO2)(LDA*1), X0
	MOVUPS 2 * SIZE(AO2)(LDA*1), X1
	MOVUPS 4 * SIZE(AO2)(LDA*1), X2
	MOVUPS 6 * SIZE(AO2)(LDA*1), X3

	PREFETCHW 88 * SIZE(B0)

	MOVAPS X0, 24 * SIZE(B0)
	MOVAPS X1, 26 * SIZE(B0)
	MOVAPS X2, 28 * SIZE(B0)
	MOVAPS X3, 30 * SIZE(B0)

	PREFETCH PREFETCHSIZE * SIZE(AO2)(LDA*2)

	MOVUPS 0 * SIZE(AO2)(LDA*2), X0
	MOVUPS 2 * SIZE(AO2)(LDA*2), X1
	MOVUPS 4 * SIZE(AO2)(LDA*2), X2
	MOVUPS 6 * SIZE(AO2)(LDA*2), X3

	PREFETCHW 96 * SIZE(B0)

	MOVAPS X0, 32 * SIZE(B0)
	MOVAPS X1, 34 * SIZE(B0)
	MOVAPS X2, 36 * SIZE(B0)
	MOVAPS X3, 38 * SIZE(B0)

	PREFETCH PREFETCHSIZE * SIZE(AO2)(LDA3*1)

	MOVUPS 0 * SIZE(AO2)(LDA3*1), X0
	MOVUPS 2 * SIZE(AO2)(LDA3*1), X1
	MOVUPS 4 * SIZE(AO2)(LDA3*1), X2
	MOVUPS 6 * SIZE(AO2)(LDA3*1), X3

	PREFETCHW 104 * SIZE(B0)

	MOVAPS X0, 40 * SIZE(B0)
	MOVAPS X1, 42 * SIZE(B0)
	MOVAPS X2, 44 * SIZE(B0)
	MOVAPS X3, 46 * SIZE(B0)

	ADDQ $8 * SIZE, AO1
	ADDQ $8 * SIZE, AO2
	LEAQ (B0)(M8*8), B0

	DECQ I
	JG   L13

L14:
	TESTQ $4, M
	JLE   L16

	MOVUPS 0 * SIZE(AO1), X0
	MOVUPS 2 * SIZE(AO1), X1
	MOVUPS 0 * SIZE(AO1)(LDA*1), X2
	MOVUPS 2 * SIZE(AO1)(LDA*1), X3

	MOVAPS X0, -16 * SIZE(B1)
	MOVAPS X1, -14 * SIZE(B1)
	MOVAPS X2, -12 * SIZE(B1)
	MOVAPS X3, -10 * SIZE(B1)

	MOVUPS 0 * SIZE(AO1)(LDA*2), X0
	MOVUPS 2 * SIZE(AO1)(LDA*2), X1
	MOVUPS 0 * SIZE(AO1)(LDA3*1), X2
	MOVUPS 2 * SIZE(AO1)(LDA3*1), X3

	MOVAPS X0, -8 * SIZE(B1)
	MOVAPS X1, -6 * SIZE(B1)
	MOVAPS X2, -4 * SIZE(B1)
	MOVAPS X3, -2 * SIZE(B1)

	MOVUPS 0 * SIZE(AO2), X0
	MOVUPS 2 * SIZE(AO2), X1
	MOVUPS 0 * SIZE(AO2)(LDA*1), X2
	MOVUPS 2 * SIZE(AO2)(LDA*1), X3

	MOVAPS X0, 0 * SIZE(B1)
	MOVAPS X1, 2 * SIZE(B1)
	MOVAPS X2, 4 * SIZE(B1)
	MOVAPS X3, 6 * SIZE(B1)

	MOVUPS 0 * SIZE(AO2)(LDA*2), X0
	MOVUPS 2 * SIZE(AO2)(LDA*2), X1
	MOVUPS 0 * SIZE(AO2)(LDA3*1), X2
	MOVUPS 2 * SIZE(AO2)(LDA3*1), X3

	MOVAPS X0, 8 * SIZE(B1)
	MOVAPS X1, 10 * SIZE(B1)
	MOVAPS X2, 12 * SIZE(B1)
	MOVAPS X3, 14 * SIZE(B1)

	ADDQ $4 * SIZE, AO1
	ADDQ $4 * SIZE, AO2
	SUBQ $-32 * SIZE, B1

L16:
	TESTQ $2, M
	JLE   L18

	MOVUPS 0 * SIZE(AO1), X0
	MOVUPS 0 * SIZE(AO1)(LDA*1), X1
	MOVUPS 0 * SIZE(AO1)(LDA*2), X2
	MOVUPS 0 * SIZE(AO1)(LDA3*1), X3

	MOVAPS X0, -16 * SIZE(B2)
	MOVAPS X1, -14 * SIZE(B2)
	MOVAPS X2, -12 * SIZE(B2)
	MOVAPS X3, -10 * SIZE(B2)

	MOVUPS 0 * SIZE(AO2), X0
	MOVUPS 0 * SIZE(AO2)(LDA*1), X1
	MOVUPS 0 * SIZE(AO2)(LDA*2), X2
	MOVUPS 0 * SIZE(AO2)(LDA3*1), X3

	MOVAPS X0, -8 * SIZE(B2)
	MOVAPS X1, -6 * SIZE(B2)
	MOVAPS X2, -4 * SIZE(B2)
	MOVAPS X3, -2 * SIZE(B2)

	ADDQ $2 * SIZE, AO1
	ADDQ $2 * SIZE, AO2
	SUBQ $-16 * SIZE, B2

L18:
	TESTQ $1, M
	JLE   L19

	MOVSD 0 * SIZE(AO1), X0
	MOVSD 0 * SIZE(AO1)(LDA*1), X1
	MOVSD 0 * SIZE(AO1)(LDA*2), X2
	MOVSD 0 * SIZE(AO1)(LDA3*1), X3

	UNPCKLPD X1, X0
	UNPCKLPD X3, X2

	MOVAPS X0, -16 * SIZE(B3)
	MOVAPS X2, -14 * SIZE(B3)

	MOVSD 0 * SIZE(AO2), X0
	MOVSD 0 * SIZE(AO2)(LDA*1), X1
	MOVSD 0 * SIZE(AO2)(LDA*2), X2
	MOVSD 0 * SIZE(AO2)(LDA3*1), X3

	UNPCKLPD X1, X0
	UNPCKLPD X3, X2

	MOVAPS X0, -12 * SIZE(B3)
	MOVAPS X2, -10 * SIZE(B3)

	SUBQ $-8 * SIZE, B3

L19:
	CMPQ N, $8
	JGE  L11

L20:
	CMPQ N, $4
	JL   L30

	SUBQ $4, N

	MOVQ A, AO1
	LEAQ (A)(LDA*2), AO2
	LEAQ (A)(LDA*4), A

	MOVQ B, B0
	ADDQ $32 * SIZE, B

	MOVQ M, I
	SARQ $3, I
	JLE  L24

L23:
	PREFETCH PREFETCHSIZE * SIZE(AO1)

	MOVUPS 0 * SIZE(AO1), X0
	MOVUPS 2 * SIZE(AO1), X1
	MOVUPS 4 * SIZE(AO1), X2
	MOVUPS 6 * SIZE(AO1), X3

	PREFETCHW 16 * SIZE(B0)

	MOVAPS X0, -16 * SIZE(B0)
	MOVAPS X1, -14 * SIZE(B0)
	MOVAPS X2, -12 * SIZE(B0)
	MOVAPS X3, -10 * SIZE(B0)

	PREFETCH PREFETCHSIZE * SIZE(AO1)(LDA*1)

	MOVUPS 0 * SIZE(AO1)(LDA*1), X0
	MOVUPS 2 * SIZE(AO1)(LDA*1), X1
	MOVUPS 4 * SIZE(AO1)(LDA*1), X2
	MOVUPS 6 * SIZE(AO1)(LDA*1), X3

	PREFETCHW 24 * SIZE(B0)

	MOVAPS X0, -8 * SIZE(B0)
	MOVAPS X1, -6 * SIZE(B0)
	MOVAPS X2, -4 * SIZE(B0)
	MOVAPS X3, -2 * SIZE(B0)

	PREFETCH PREFETCHSIZE * SIZE(AO1)(LDA*2)

	MOVUPS 0 * SIZE(AO2), X0
	MOVUPS 2 * SIZE(AO2), X1
	MOVUPS 4 * SIZE(AO2), X2
	MOVUPS 6 * SIZE(AO2), X3

	PREFETCHW 32 * SIZE(B0)

	MOVAPS X0, 0 * SIZE(B0)
	MOVAPS X1, 2 * SIZE(B0)
	MOVAPS X2, 4 * SIZE(B0)
	MOVAPS X3, 6 * SIZE(B0)

	PREFETCH PREFETCHSIZE * SIZE(AO1)(LDA3*1)

	MOVUPS 0 * SIZE(AO2)(LDA*1), X0
	MOVUPS 2 * SIZE(AO2)(LDA*1), X1
	MOVUPS 4 * SIZE(AO2)(LDA*1), X2
	MOVUPS 6 * SIZE(AO2)(LDA*1), X3

	PREFETCHW 40 * SIZE(B0)

	MOVAPS X0, 8 * SIZE(B0)
	MOVAPS X1, 10 * SIZE(B0)
	MOVAPS X2, 12 * SIZE(B0)
	MOVAPS X3, 14 * SIZE(B0)

	ADDQ $8 * SIZE, AO1
	ADDQ $8 * SIZE, AO2
	LEAQ (B0)(M8*8), B0

	DECQ I
	JG   L23

L24:
	TESTQ $4, M
	JLE   L26

	MOVUPS 0 * SIZE(AO1), X0
	MOVUPS 2 * SIZE(AO1), X1
	MOVUPS 0 * SIZE(AO1)(LDA*1), X2
	MOVUPS 2 * SIZE(AO1)(LDA*1), X3

	MOVAPS X0, -16 * SIZE(B1)
	MOVAPS X1, -14 * SIZE(B1)
	MOVAPS X2, -12 * SIZE(B1)
	MOVAPS X3, -10 * SIZE(B1)

	MOVUPS 0 * SIZE(AO2), X0
	MOVUPS 2 * SIZE(AO2), X1
	MOVUPS 0 * SIZE(AO2)(LDA*1), X2
	MOVUPS 2 * SIZE(AO2)(LDA*1), X3

	MOVAPS X0, -8 * SIZE(B1)
	MOVAPS X1, -6 * SIZE(B1)
	MOVAPS X2, -4 * SIZE(B1)
	MOVAPS X3, -2 * SIZE(B1)

	ADDQ $4 * SIZE, AO1
	ADDQ $4 * SIZE, AO2
	SUBQ $-16 * SIZE, B1

L26:
	TESTQ $2, M
	JLE   L28

	MOVUPS 0 * SIZE(AO1), X0
	MOVUPS 0 * SIZE(AO1)(LDA*1), X1
	MOVUPS 0 * SIZE(AO2), X2
	MOVUPS 0 * SIZE(AO2)(LDA*1), X3

	MOVAPS X0, -16 * SIZE(B2)
	MOVAPS X1, -14 * SIZE(B2)
	MOVAPS X2, -12 * SIZE(B2)
	MOVAPS X3, -10 * SIZE(B2)

	ADDQ $2 * SIZE, AO1
	ADDQ $2 * SIZE, AO2
	SUBQ $-8 * SIZE, B2

L28:
	TESTQ $1, M
	JLE   L30

	MOVSD 0 * SIZE(AO1), X0
	MOVSD 0 * SIZE(AO1)(LDA*1), X1
	MOVSD 0 * SIZE(AO2), X2
	MOVSD 0 * SIZE(AO2)(LDA*1), X3

	UNPCKLPD X1, X0
	UNPCKLPD X3, X2

	MOVAPS X0, -16 * SIZE(B3)
	MOVAPS X2, -14 * SIZE(B3)
	SUBQ   $-4 * SIZE, B3

L30:
	CMPQ N, $2
	JL   L40

	SUBQ $2, N

	MOVQ A, AO1
	LEAQ (A)(LDA*1), AO2
	LEAQ (A)(LDA*2), A

	MOVQ B, B0
	ADDQ $16 * SIZE, B

	MOVQ M, I
	SARQ $3, I
	JLE  L34

L33:
	PREFETCH PREFETCHSIZE * SIZE(AO1)

	MOVUPS 0 * SIZE(AO1), X0
	MOVUPS 2 * SIZE(AO1), X1
	MOVUPS 4 * SIZE(AO1), X2
	MOVUPS 6 * SIZE(AO1), X3

	PREFETCHW 0 * SIZE(B0)

	MOVAPS X0, -16 * SIZE(B0)
	MOVAPS X1, -14 * SIZE(B0)
	MOVAPS X2, -12 * SIZE(B0)
	MOVAPS X3, -10 * SIZE(B0)

	PREFETCH PREFETCHSIZE * SIZE(AO2)

	MOVUPS 0 * SIZE(AO2), X0
	MOVUPS 2 * SIZE(AO2), X1
	MOVUPS 4 * SIZE(AO2), X2
	MOVUPS 6 * SIZE(AO2), X3

	PREFETCHW 8 * SIZE(B0)

	MOVAPS X0, -8 * SIZE(B0)
	MOVAPS X1, -6 * SIZE(B0)
	MOVAPS X2, -4 * SIZE(B0)
	MOVAPS X3, -2 * SIZE(B0)

	ADDQ $8 * SIZE, AO1
	ADDQ $8 * SIZE, AO2
	LEAQ (B0)(M8*8), B0

	DECQ I
	JG   L33

L34:
	TESTQ $4, M
	JLE   L36

	MOVUPS 0 * SIZE(AO1), X0
	MOVUPS 2 * SIZE(AO1), X1
	MOVUPS 0 * SIZE(AO2), X2
	MOVUPS 2 * SIZE(AO2), X3

	MOVAPS X0, -16 * SIZE(B1)
	MOVAPS X1, -14 * SIZE(B1)
	MOVAPS X2, -12 * SIZE(B1)
	MOVAPS X3, -10 * SIZE(B1)

	ADDQ $4 * SIZE, AO1
	ADDQ $4 * SIZE, AO2
	SUBQ $-8 * SIZE, B1

L36:
	TESTQ $2, M
	JLE   L38

	MOVUPS 0 * SIZE(AO1), X0
	MOVUPS 0 * SIZE(AO2), X1

	MOVAPS X0, -16 * SIZE(B2)
	MOVAPS X1, -14 * SIZE(B2)

	ADDQ $2 * SIZE, AO1
	ADDQ $2 * SIZE, AO2
	SUBQ $-4 * SIZE, B2

L38:
	TESTQ $1, M
	JLE   L40

	MOVSD 0 * SIZE(AO1), X0
	MOVSD 0 * SIZE(AO2), X1

	UNPCKLPD X1, X0

	MOVAPS X0, -16 * SIZE(B3)
	SUBQ   $-2 * SIZE, B3

L40:
	CMPQ N, $1
	JL   L999

	MOVQ A, AO1

	MOVQ B, B0

	MOVQ M, I
	SARQ $3, I
	JLE  L44

L43:
	PREFETCH PREFETCHSIZE * 8 * SIZE(AO1)

	MOVUPS 0 * SIZE(AO1), X0
	MOVUPS 2 * SIZE(AO1), X1
	MOVUPS 4 * SIZE(AO1), X2
	MOVUPS 6 * SIZE(AO1), X3

	PREFETCHW -8 * SIZE(B0)

	MOVAPS X0, -16 * SIZE(B0)
	MOVAPS X1, -14 * SIZE(B0)
	MOVAPS X2, -12 * SIZE(B0)
	MOVAPS X3, -10 * SIZE(B0)

	ADDQ $8 * SIZE, AO1
	LEAQ (B0)(M8*8), B0

	DECQ I
	JG   L43

L44:
	TESTQ $4, M
	JLE   L45

	MOVUPS 0 * SIZE(AO1), X0
	MOVUPS 2 * SIZE(AO1), X1

	MOVAPS X0, -16 * SIZE(B1)
	MOVAPS X1, -14 * SIZE(B1)

	ADDQ $4 * SIZE, AO1
	SUBQ $-4 * SIZE, B1

L45:
	TESTQ $2, M
	JLE   L46

	MOVUPS 0 * SIZE(AO1), X0

	MOVAPS X0, -16 * SIZE(B2)

	ADDQ $2 * SIZE, AO1
	SUBQ $-2 * SIZE, B2

L46:
	TESTQ $1, M
	JLE   L999

	MOVSD 0 * SIZE(AO1), X0

	MOVLPD X0, -16 * SIZE(B3)
	JMP    L999

L999:
	RET
